PROGRAM NTFS_System;

//Procedure RleCompress2(Stream : TStream); forward;
//Procedure RleDecompress2(Stream : TStream); forward;

// kind of an Idea from bitbox, locs=84;

{TYPE 
<Type declarations>} 

VAR 
//<Variable declarations>
    div_dbl: double;
    a,b,c, i, bin1, bin2, bin3: integer;
    wd: word;
    st: String;
    fileStream: TFileStream;
    midilist: TStringList;
//<FUNCTION>
//<PROCEDURE> 

procedure NTFSDemo;
begin
 //Function NtfsGetCompression( const FileName : string; var State : Short) : Boolean;');
 //Function NtfsGetCompression1( const FileName : string) : TFileCompressionState;');
 //Function NtfsSetCompression( const FileName : string; const State : Short) : Boolean');
 //Procedure NtfsSetFileCompression( const FileName : string; const State : TFileCompressionState)');
 //Procedure NtfsSetDirectoryTreeCompression( const Directory : string; const State : TFileCompressionState)');
 //Procedure NtfsSetDefaultFileCompression( const Directory : string; const State : TFileCompressionState)');
 //Procedure NtfsSetPathCompression( const Path : string; const State : TFileCompressionState; Recursive : Boolean)');
 if NtfsSetSparse(Exepath+'firstdemo.txt') then writeln('NtfsSetSparse true');
 //Function NtfsZeroDataByHandle( const Handle : THandle; const First, Last : Int64) : Boolean');
 //Function NtfsZeroDataByName( const FileName : string; const First, Last : Int64) : Boolean');
 //Function NtfsQueryAllocRanges( const FileName : string; Offset, Count : Int64; var Ranges : TNtfsAllocRanges) : Boolean');
 //Function NtfsGetAllocRangeEntry( const Ranges : TNtfsAllocRanges; Index : Integer) : TFileAllocatedRangeBuffer');
 //Function NtfsSparseStreamsSupported( const Volume : string) : Boolean');
  if NtfsGetSparse(Exepath+'firstdemo.txt') then writeln('NtfsGetSparse true');
 {Function NtfsDeleteReparsePoint( const FileName : string; ReparseTag : DWORD) : Boolean');
 Function NtfsSetReparsePoint( const FileName : string; var ReparseData, Size : Longword) : Boolean');
 Function NtfsGetReparsePoint( const FileName : string; var ReparseData : TReparseGuidDataBuffer) : Boolean');
 Function NtfsGetReparseTag( const Path : string; var Tag : DWORD) : Boolean');
 Function NtfsReparsePointsSupported( const Volume : string) : Boolean');
 Function NtfsFileHasReparsePoint( const Path : string) : Boolean');
 Function NtfsIsFolderMountPoint( const Path : string) : Boolean');
 Function NtfsMountDeviceAsDrive( const Device : string; Drive : Char) : Boolean');
 Function NtfsMountVolume( const Volume : Char; const MountPoint : string) : Boolean');
  CL.AddTypeS('TOpLock', '( olExclusive, olReadOnly, olBatch, olFilter )');
 Function NtfsOpLockAckClosePending( Handle : THandle; Overlapped : TOverlapped) : Boolean');
 Function NtfsOpLockBreakAckNo2( Handle : THandle; Overlapped : TOverlapped) : Boolean');
 Function NtfsOpLockBreakAcknowledge( Handle : THandle; Overlapped : TOverlapped) : Boolean');
 Function NtfsOpLockBreakNotify( Handle : THandle; Overlapped : TOverlapped) : Boolean');
 Function NtfsRequestOpLock( Handle : THandle; Kind : TOpLock; Overlapped : TOverlapped) : Boolean');
 Function NtfsCreateJunctionPoint( const Source, Destination : string) : Boolean');
 Function NtfsDeleteJunctionPoint( const Source : string) : Boolean');
 Function NtfsGetJunctionPointDestination( const Source : string; var Destination : string) : Boolean');}
end;


function GetTextFromFile(const AFile: String; var RetStr: string): boolean;
//var
  //fileStream: TFileStream;
begin
  result:= false;
  if not fileExists(AFile) then exit;
  FileStream:= TFileStream.Create(AFile, fmOpenRead);
    writeln('file size '+inttostr(filestream.size));
  try
    if FileStream.Size > 0 then begin
      SetLength(RetStr, FileStream.Size);
      fileStream.Seek(0, 0)
      FileStream.Read(RetStr, FileStream.Size); 
      result:= true;
    end;
  finally
    //FileStream.Free;
  end; //try
end;

Procedure AllBooleanPattern(aX, aY: integer);
begin
    Writeln(#13#10+'************** All Booolean Functions **************');
    PrintF('%-36s 01 False',[inttobin(0)])
    PrintF('%-36s 02 AND',[inttobin(aX AND aY)])
    PrintF('%-36s 03 Inhibit',[inttobin(aX AND NOT aY)])
    PrintF('%-36s 04 Prepend',[inttobin(aX)])
    PrintF('%-36s 05 Praesect',[inttobin(NOT aX AND aY)])
    PrintF('%-36s 06 Postpend',[inttobin(aY)])
    PrintF('%-36s 07 XOR',[inttobin(aX XOR aY)])
    PrintF('%-36s 08 OR',[inttobin(aX OR aY)])
    PrintF('%-36s 09 NOR',[inttobin(NOT(aX OR aY))])
    PrintF('%-36s 10 Aequival',[inttobin((NOT aX OR aY)AND(NOT aY OR aX))])
    PrintF('%-36s 11 NegY',[inttobin(NOT aY)])
    PrintF('%-36s 12 ImplicatY',[inttobin(aX OR NOT aY)])
    PrintF('%-36s 13 NegX',[inttobin(NOT aX)])
    PrintF('%-36s 14 ImplicatX',[inttobin(NOT aX OR aY)])
    PrintF('%-36s 15 NAND',[inttobin(NOT(aX AND aY))])
    PrintF('%-36s 16 True',[inttobin(NOT 0)])
end;

BEGIN  //Main
//<Executable statement

 NTFSDemo;

if GetTextFromFile(ExePath+'firstdemo.txt',st) then
    ShowMessageBig(st);
    
       fileStream.Seek(0, 0)

       writeln(StreamtoString(fileStream))
       //StringToStream

       fileStream.Seek(0, 0)

       //RleCompress2(fileStream);
       fileStream.Free;
       
       midilist:= TStringList.create;
       GetMidiOutputs(midilist);
       for i:= 1 to midilist.count -1 do 
         writeln(midilist.strings[i]);
       midilist.Free;


  
   //RleDecompress( Stream : TStream)');

  
   div_dbl:= 5.0 / 2.0; // 2.500000
   writeln(Format('%0.6f', [div_dbl]))
   div_dbl:= 20 mod 3;  // 2.00000
   writeln(Format('%f', [div_dbl]))
   a:= 5
   b:= 6
   if not (A<>B) then writeln('even') else
                    writeln('odd');   
   if (A=B) then writeln('even') else
                    writeln('odd');   

   // wholee ASCII Table
   { writeln(Chr(67))
   for i:= 0 to 255 do
     writeln(format('wert %d %s',[i, Chr(i)]))}

    writeln(Format('%s',[inttobin(97)]))
    writeln(Format('%s',[inttobin(223)]))
    writeln(Format('%s',[inttobin(97 XOR 223)]))
    
    bin1:= 97;
    bin2:= 223;
    bin3:= bin1 XOR bin2;
    writeln(Format('%s',[IntToBin(bin3)]))
    writeln(' ');
    wd:= 150;
    writeln('first     '+IntToBin(wd))
    writeln(IntToStr(wd))
    
    //double the value
    wd:= wd SHL 1
    writeln('double '+IntToBin(wd))
    writeln(IntToStr(wd))
    
    //half the value
    wd:= wd SHR 1
    writeln('half     '+IntToBin(wd))
    writeln(IntToStr(wd))
    
    //init the value
    writeln('init      '+IntToBin(wd))
    writeln('          '+IntToBin(wd XOR wd))

    AllBooleanPattern(10,12);

END. 


       (A<>B)  NOT --> A=B
        0  0 0 1       0 0
        0  1 1 0
        1  0 1 0
        1  1 0 1       1 1
        
        //19.8. um 16 Uhr PT1 Update
        
  XOR App      
  0110 0001
^ 1101 1111
-----------
  1011 1110
        
        
  00000000000000000000000100101100 XOR
  00000000000000000000000100101100
                         000000000
                         
00000000000000000000000000000000     01 False
00000000000000000000000000001000     02 AND
00000000000000000000000000000010     03 Inhibit
00000000000000000000000000001010     04 Prepend
00000000000000000000000000000100     05 Praesect
00000000000000000000000000001100     06 Postpend
00000000000000000000000000000110     07 XOR
00000000000000000000000000001110     08 OR
11111111111111111111111111110001     09 NOR
11111111111111111111111111111001     10 Aequival
11111111111111111111111111110011     11 NegY
11111111111111111111111111111011     12 ImplicatY
11111111111111111111111111110101     13 NegX
11111111111111111111111111111101     14 ImplicatX
11111111111111111111111111110111     15 NAND
11111111111111111111111111111111     16 True                         

----app_template_loaded----
